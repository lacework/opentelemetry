apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true
    [auth]
    disable_login_form = true
    [auth.anonymous]
    enabled = true
    org_name = Main Org.
    org_role = Admin
    [grafana_net]
    url = https://grafana.net
    [log]
    mode = console
    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning
    [server]
    domain = ''
    root_url = %(protocol)s://%(domain)s:%(http_port)s/grafana
    serve_from_sub_path = true
  datasources.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      uid: prometheus
      type: prometheus
      url: http://prometheus:9090
      editable: true
      isDefault: true
---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: grafana
    spec:
      containers:
      - image: grafana/grafana:latest
        name: grafana
        volumeMounts:
          - name: config-volume
            mountPath: "/etc/grafana/grafana.ini"
            subPath: grafana.ini
          - name: storage-volume
            mountPath: "/var/lib/grafana"
          - name: config-volume
            mountPath: "/etc/grafana/provisioning/datasources/datasources.yaml"
            subPath: "datasources.yaml"
        ports:
          - name: grafana
            containerPort: 3000
            protocol: TCP
          - name: gossip-tcp
            containerPort: 9094
            protocol: TCP
          - name: gossip-udp
            containerPort: 9094
            protocol: UDP
        env:
          - name: GF_PATHS_DATA
            value: /var/lib/grafana/
          - name: GF_PATHS_LOGS
            value: /var/log/grafana
          - name: GF_PATHS_PLUGINS
            value: /var/lib/grafana/plugins
          - name: GF_PATHS_PROVISIONING
            value: /etc/grafana/provisioning
        livenessProbe:
          failureThreshold: 10
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 60
          timeoutSeconds: 30
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
        resources:
          limits:
            memory: 150Mi
      volumes:
        - name: config-volume
          configMap:
            name: grafana-config
        - name: storage-volume
          emptyDir: {}

---
#kubectl port-forward service/grafana 3000:3000
apiVersion: v1
kind: Service
metadata:
  name: grafana
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
